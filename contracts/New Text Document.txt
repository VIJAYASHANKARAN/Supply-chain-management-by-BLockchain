// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SupplyChain {
    enum ProductStatus { Created, InTransit, Delivered }

    struct Product {
        uint256 id;
        string name;
        string description;
        uint256 price;
        address owner;
        ProductStatus status;
        address[] history;
    }

    mapping(uint256 => Product) public products;
    uint256 public productCount;

    event ProductCreated(uint256 id, string name, uint256 price);
    event ProductStatusUpdated(uint256 id, ProductStatus status);

    function createProduct(
        string memory _name,
        string memory _description,
        uint256 _price
    ) public {
        productCount++;
        products[productCount] = Product(
            productCount,
            _name,
            _description,
            _price,
            msg.sender,
            ProductStatus.Created,
            new address[](0)
        );
        products[productCount].history.push(msg.sender);
        emit ProductCreated(productCount, _name, _price);
    }

    function transferProduct(uint256 _id, address _to) public {
        require(products[_id].owner == msg.sender, "Only owner can transfer");
        products[_id].owner = _to;
        products[_id].history.push(_to);
        
        if (_to == products[_id].history[0]) {
            products[_id].status = ProductStatus.Delivered;
        } else {
            products[_id].status = ProductStatus.InTransit;
        }
        
        emit ProductStatusUpdated(_id, products[_id].status);
    }

    function getProductHistory(uint256 _id) public view returns (address[] memory) {
        return products[_id].history;
    }

    function getProductCount() public view returns (uint256) {
        return productCount;
    }
}